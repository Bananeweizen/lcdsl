/**
 * generated by Xtext 2.10.0
 */
package com.wamas.ide.launching.lcDsl.impl;

import com.wamas.ide.launching.lcDsl.AddPlugin;
import com.wamas.ide.launching.lcDsl.AnyPath;
import com.wamas.ide.launching.lcDsl.ApplicationExtPoint;
import com.wamas.ide.launching.lcDsl.ClearOption;
import com.wamas.ide.launching.lcDsl.ExistingPath;
import com.wamas.ide.launching.lcDsl.GroupMember;
import com.wamas.ide.launching.lcDsl.IgnorePlugin;
import com.wamas.ide.launching.lcDsl.JavaType;
import com.wamas.ide.launching.lcDsl.LaunchConfig;
import com.wamas.ide.launching.lcDsl.LaunchConfigType;
import com.wamas.ide.launching.lcDsl.LcDslPackage;
import com.wamas.ide.launching.lcDsl.MemoryOption;
import com.wamas.ide.launching.lcDsl.ProductExtPoint;
import com.wamas.ide.launching.lcDsl.ProgramArgument;
import com.wamas.ide.launching.lcDsl.Project;
import com.wamas.ide.launching.lcDsl.VmArgument;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Launch Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isExplicit <em>Explicit</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#isManual <em>Manual</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getSuperConfig <em>Super Config</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getClears <em>Clears</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getWorkspace <em>Workspace</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getWorkingDir <em>Working Dir</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getMemory <em>Memory</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getProject <em>Project</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getMainClass <em>Main Class</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getApplication <em>Application</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getProduct <em>Product</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getPlugins <em>Plugins</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getIgnore <em>Ignore</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getGroupMembers <em>Group Members</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getVmArgs <em>Vm Args</em>}</li>
 *   <li>{@link com.wamas.ide.launching.lcDsl.impl.LaunchConfigImpl#getProgArgs <em>Prog Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LaunchConfigImpl extends MinimalEObjectImpl.Container implements LaunchConfig
{
  /**
   * The default value of the '{@link #isExplicit() <em>Explicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplicit()
   * @generated
   * @ordered
   */
  protected static final boolean EXPLICIT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExplicit() <em>Explicit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplicit()
   * @generated
   * @ordered
   */
  protected boolean explicit = EXPLICIT_EDEFAULT;

  /**
   * The default value of the '{@link #isManual() <em>Manual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManual()
   * @generated
   * @ordered
   */
  protected static final boolean MANUAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isManual() <em>Manual</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isManual()
   * @generated
   * @ordered
   */
  protected boolean manual = MANUAL_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final LaunchConfigType TYPE_EDEFAULT = LaunchConfigType.JAVA;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected LaunchConfigType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSuperConfig() <em>Super Config</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperConfig()
   * @generated
   * @ordered
   */
  protected LaunchConfig superConfig;

  /**
   * The cached value of the '{@link #getClears() <em>Clears</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClears()
   * @generated
   * @ordered
   */
  protected ClearOption clears;

  /**
   * The cached value of the '{@link #getWorkspace() <em>Workspace</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkspace()
   * @generated
   * @ordered
   */
  protected AnyPath workspace;

  /**
   * The cached value of the '{@link #getWorkingDir() <em>Working Dir</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkingDir()
   * @generated
   * @ordered
   */
  protected ExistingPath workingDir;

  /**
   * The cached value of the '{@link #getMemory() <em>Memory</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected MemoryOption memory;

  /**
   * The cached value of the '{@link #getProject() <em>Project</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProject()
   * @generated
   * @ordered
   */
  protected Project project;

  /**
   * The cached value of the '{@link #getMainClass() <em>Main Class</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainClass()
   * @generated
   * @ordered
   */
  protected JavaType mainClass;

  /**
   * The cached value of the '{@link #getApplication() <em>Application</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApplication()
   * @generated
   * @ordered
   */
  protected ApplicationExtPoint application;

  /**
   * The cached value of the '{@link #getProduct() <em>Product</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProduct()
   * @generated
   * @ordered
   */
  protected ProductExtPoint product;

  /**
   * The cached value of the '{@link #getPlugins() <em>Plugins</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlugins()
   * @generated
   * @ordered
   */
  protected EList<AddPlugin> plugins;

  /**
   * The cached value of the '{@link #getIgnore() <em>Ignore</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIgnore()
   * @generated
   * @ordered
   */
  protected EList<IgnorePlugin> ignore;

  /**
   * The cached value of the '{@link #getGroupMembers() <em>Group Members</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupMembers()
   * @generated
   * @ordered
   */
  protected EList<GroupMember> groupMembers;

  /**
   * The cached value of the '{@link #getVmArgs() <em>Vm Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmArgs()
   * @generated
   * @ordered
   */
  protected EList<VmArgument> vmArgs;

  /**
   * The cached value of the '{@link #getProgArgs() <em>Prog Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgArgs()
   * @generated
   * @ordered
   */
  protected EList<ProgramArgument> progArgs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LaunchConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LcDslPackage.Literals.LAUNCH_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isExplicit()
  {
    return explicit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExplicit(boolean newExplicit)
  {
    boolean oldExplicit = explicit;
    explicit = newExplicit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__EXPLICIT, oldExplicit, explicit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isManual()
  {
    return manual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setManual(boolean newManual)
  {
    boolean oldManual = manual;
    manual = newManual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MANUAL, oldManual, manual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchConfigType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(LaunchConfigType newType)
  {
    LaunchConfigType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchConfig getSuperConfig()
  {
    if (superConfig != null && superConfig.eIsProxy())
    {
      InternalEObject oldSuperConfig = (InternalEObject)superConfig;
      superConfig = (LaunchConfig)eResolveProxy(oldSuperConfig);
      if (superConfig != oldSuperConfig)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG, oldSuperConfig, superConfig));
      }
    }
    return superConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LaunchConfig basicGetSuperConfig()
  {
    return superConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSuperConfig(LaunchConfig newSuperConfig)
  {
    LaunchConfig oldSuperConfig = superConfig;
    superConfig = newSuperConfig;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG, oldSuperConfig, superConfig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClearOption getClears()
  {
    return clears;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClears(ClearOption newClears, NotificationChain msgs)
  {
    ClearOption oldClears = clears;
    clears = newClears;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CLEARS, oldClears, newClears);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClears(ClearOption newClears)
  {
    if (newClears != clears)
    {
      NotificationChain msgs = null;
      if (clears != null)
        msgs = ((InternalEObject)clears).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CLEARS, null, msgs);
      if (newClears != null)
        msgs = ((InternalEObject)newClears).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__CLEARS, null, msgs);
      msgs = basicSetClears(newClears, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__CLEARS, newClears, newClears));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnyPath getWorkspace()
  {
    return workspace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWorkspace(AnyPath newWorkspace, NotificationChain msgs)
  {
    AnyPath oldWorkspace = workspace;
    workspace = newWorkspace;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKSPACE, oldWorkspace, newWorkspace);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWorkspace(AnyPath newWorkspace)
  {
    if (newWorkspace != workspace)
    {
      NotificationChain msgs = null;
      if (workspace != null)
        msgs = ((InternalEObject)workspace).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKSPACE, null, msgs);
      if (newWorkspace != null)
        msgs = ((InternalEObject)newWorkspace).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKSPACE, null, msgs);
      msgs = basicSetWorkspace(newWorkspace, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKSPACE, newWorkspace, newWorkspace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExistingPath getWorkingDir()
  {
    return workingDir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWorkingDir(ExistingPath newWorkingDir, NotificationChain msgs)
  {
    ExistingPath oldWorkingDir = workingDir;
    workingDir = newWorkingDir;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, oldWorkingDir, newWorkingDir);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWorkingDir(ExistingPath newWorkingDir)
  {
    if (newWorkingDir != workingDir)
    {
      NotificationChain msgs = null;
      if (workingDir != null)
        msgs = ((InternalEObject)workingDir).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, null, msgs);
      if (newWorkingDir != null)
        msgs = ((InternalEObject)newWorkingDir).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, null, msgs);
      msgs = basicSetWorkingDir(newWorkingDir, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__WORKING_DIR, newWorkingDir, newWorkingDir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryOption getMemory()
  {
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMemory(MemoryOption newMemory, NotificationChain msgs)
  {
    MemoryOption oldMemory = memory;
    memory = newMemory;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MEMORY, oldMemory, newMemory);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMemory(MemoryOption newMemory)
  {
    if (newMemory != memory)
    {
      NotificationChain msgs = null;
      if (memory != null)
        msgs = ((InternalEObject)memory).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MEMORY, null, msgs);
      if (newMemory != null)
        msgs = ((InternalEObject)newMemory).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MEMORY, null, msgs);
      msgs = basicSetMemory(newMemory, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MEMORY, newMemory, newMemory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project getProject()
  {
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProject(Project newProject, NotificationChain msgs)
  {
    Project oldProject = project;
    project = newProject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PROJECT, oldProject, newProject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProject(Project newProject)
  {
    if (newProject != project)
    {
      NotificationChain msgs = null;
      if (project != null)
        msgs = ((InternalEObject)project).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PROJECT, null, msgs);
      if (newProject != null)
        msgs = ((InternalEObject)newProject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PROJECT, null, msgs);
      msgs = basicSetProject(newProject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PROJECT, newProject, newProject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaType getMainClass()
  {
    return mainClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainClass(JavaType newMainClass, NotificationChain msgs)
  {
    JavaType oldMainClass = mainClass;
    mainClass = newMainClass;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS, oldMainClass, newMainClass);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMainClass(JavaType newMainClass)
  {
    if (newMainClass != mainClass)
    {
      NotificationChain msgs = null;
      if (mainClass != null)
        msgs = ((InternalEObject)mainClass).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS, null, msgs);
      if (newMainClass != null)
        msgs = ((InternalEObject)newMainClass).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS, null, msgs);
      msgs = basicSetMainClass(newMainClass, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS, newMainClass, newMainClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationExtPoint getApplication()
  {
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApplication(ApplicationExtPoint newApplication, NotificationChain msgs)
  {
    ApplicationExtPoint oldApplication = application;
    application = newApplication;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__APPLICATION, oldApplication, newApplication);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setApplication(ApplicationExtPoint newApplication)
  {
    if (newApplication != application)
    {
      NotificationChain msgs = null;
      if (application != null)
        msgs = ((InternalEObject)application).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__APPLICATION, null, msgs);
      if (newApplication != null)
        msgs = ((InternalEObject)newApplication).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__APPLICATION, null, msgs);
      msgs = basicSetApplication(newApplication, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__APPLICATION, newApplication, newApplication));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProductExtPoint getProduct()
  {
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProduct(ProductExtPoint newProduct, NotificationChain msgs)
  {
    ProductExtPoint oldProduct = product;
    product = newProduct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PRODUCT, oldProduct, newProduct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProduct(ProductExtPoint newProduct)
  {
    if (newProduct != product)
    {
      NotificationChain msgs = null;
      if (product != null)
        msgs = ((InternalEObject)product).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PRODUCT, null, msgs);
      if (newProduct != null)
        msgs = ((InternalEObject)newProduct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LcDslPackage.LAUNCH_CONFIG__PRODUCT, null, msgs);
      msgs = basicSetProduct(newProduct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LcDslPackage.LAUNCH_CONFIG__PRODUCT, newProduct, newProduct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AddPlugin> getPlugins()
  {
    if (plugins == null)
    {
      plugins = new EObjectContainmentEList<AddPlugin>(AddPlugin.class, this, LcDslPackage.LAUNCH_CONFIG__PLUGINS);
    }
    return plugins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IgnorePlugin> getIgnore()
  {
    if (ignore == null)
    {
      ignore = new EObjectContainmentEList<IgnorePlugin>(IgnorePlugin.class, this, LcDslPackage.LAUNCH_CONFIG__IGNORE);
    }
    return ignore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GroupMember> getGroupMembers()
  {
    if (groupMembers == null)
    {
      groupMembers = new EObjectContainmentEList<GroupMember>(GroupMember.class, this, LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS);
    }
    return groupMembers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VmArgument> getVmArgs()
  {
    if (vmArgs == null)
    {
      vmArgs = new EObjectContainmentEList<VmArgument>(VmArgument.class, this, LcDslPackage.LAUNCH_CONFIG__VM_ARGS);
    }
    return vmArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ProgramArgument> getProgArgs()
  {
    if (progArgs == null)
    {
      progArgs = new EObjectContainmentEList<ProgramArgument>(ProgramArgument.class, this, LcDslPackage.LAUNCH_CONFIG__PROG_ARGS);
    }
    return progArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return basicSetClears(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return basicSetWorkspace(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return basicSetWorkingDir(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return basicSetMemory(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PROJECT:
        return basicSetProject(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS:
        return basicSetMainClass(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return basicSetApplication(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return basicSetProduct(null, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return ((InternalEList<?>)getPlugins()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return ((InternalEList<?>)getIgnore()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return ((InternalEList<?>)getGroupMembers()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return ((InternalEList<?>)getVmArgs()).basicRemove(otherEnd, msgs);
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return ((InternalEList<?>)getProgArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        return isExplicit();
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        return isManual();
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        return getType();
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        return getName();
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        if (resolve) return getSuperConfig();
        return basicGetSuperConfig();
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return getClears();
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return getWorkspace();
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return getWorkingDir();
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return getMemory();
      case LcDslPackage.LAUNCH_CONFIG__PROJECT:
        return getProject();
      case LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS:
        return getMainClass();
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return getApplication();
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return getProduct();
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return getPlugins();
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return getIgnore();
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return getGroupMembers();
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return getVmArgs();
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return getProgArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        setExplicit((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        setManual((Boolean)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        setType((LaunchConfigType)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        setName((String)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        setSuperConfig((LaunchConfig)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        setClears((ClearOption)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        setWorkspace((AnyPath)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        setWorkingDir((ExistingPath)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        setMemory((MemoryOption)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROJECT:
        setProject((Project)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS:
        setMainClass((JavaType)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        setApplication((ApplicationExtPoint)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        setProduct((ProductExtPoint)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        getPlugins().clear();
        getPlugins().addAll((Collection<? extends AddPlugin>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        getIgnore().clear();
        getIgnore().addAll((Collection<? extends IgnorePlugin>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        getGroupMembers().clear();
        getGroupMembers().addAll((Collection<? extends GroupMember>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        getVmArgs().clear();
        getVmArgs().addAll((Collection<? extends VmArgument>)newValue);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        getProgArgs().clear();
        getProgArgs().addAll((Collection<? extends ProgramArgument>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        setExplicit(EXPLICIT_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        setManual(MANUAL_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        setSuperConfig((LaunchConfig)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        setClears((ClearOption)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        setWorkspace((AnyPath)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        setWorkingDir((ExistingPath)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        setMemory((MemoryOption)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROJECT:
        setProject((Project)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS:
        setMainClass((JavaType)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        setApplication((ApplicationExtPoint)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        setProduct((ProductExtPoint)null);
        return;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        getPlugins().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        getIgnore().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        getGroupMembers().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        getVmArgs().clear();
        return;
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        getProgArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LcDslPackage.LAUNCH_CONFIG__EXPLICIT:
        return explicit != EXPLICIT_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__MANUAL:
        return manual != MANUAL_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__TYPE:
        return type != TYPE_EDEFAULT;
      case LcDslPackage.LAUNCH_CONFIG__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LcDslPackage.LAUNCH_CONFIG__SUPER_CONFIG:
        return superConfig != null;
      case LcDslPackage.LAUNCH_CONFIG__CLEARS:
        return clears != null;
      case LcDslPackage.LAUNCH_CONFIG__WORKSPACE:
        return workspace != null;
      case LcDslPackage.LAUNCH_CONFIG__WORKING_DIR:
        return workingDir != null;
      case LcDslPackage.LAUNCH_CONFIG__MEMORY:
        return memory != null;
      case LcDslPackage.LAUNCH_CONFIG__PROJECT:
        return project != null;
      case LcDslPackage.LAUNCH_CONFIG__MAIN_CLASS:
        return mainClass != null;
      case LcDslPackage.LAUNCH_CONFIG__APPLICATION:
        return application != null;
      case LcDslPackage.LAUNCH_CONFIG__PRODUCT:
        return product != null;
      case LcDslPackage.LAUNCH_CONFIG__PLUGINS:
        return plugins != null && !plugins.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__IGNORE:
        return ignore != null && !ignore.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__GROUP_MEMBERS:
        return groupMembers != null && !groupMembers.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__VM_ARGS:
        return vmArgs != null && !vmArgs.isEmpty();
      case LcDslPackage.LAUNCH_CONFIG__PROG_ARGS:
        return progArgs != null && !progArgs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (explicit: ");
    result.append(explicit);
    result.append(", manual: ");
    result.append(manual);
    result.append(", type: ");
    result.append(type);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //LaunchConfigImpl
