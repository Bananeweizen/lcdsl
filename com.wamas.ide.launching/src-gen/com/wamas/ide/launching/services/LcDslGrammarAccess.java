/*
 * generated by Xtext 2.10.0
 */
package com.wamas.ide.launching.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LcDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LCModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.LCModel");
		private final Assignment cConfigurationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConfigurationsLaunchConfigParserRuleCall_0 = (RuleCall)cConfigurationsAssignment.eContents().get(0);
		
		/// **
		// * TODO: The language is still missing some things that could be set:
		// * 
		// * General: variable expansion for all paths (string subst, system properties)!
		// * 
		// * Common:
		// *   - stdout/stderr redirection support, console allocation, ...
		// * 
		// * Eclipse:
		// *   - support for setting Java runtime environment settings
		// *   - validate plugins automatically prior to launching
		// *   - plugin start level settings (start leven & autostart)
		// *   - config.ini related settings
		// *   - software installation support setting
		// *   - tracing settings
		// *   - environment: append vs. replace setting
		// * 
		// * Java:
		// *   - support for setting JRE
		// *   - main class search settings (system libraries, inheritence)
		// *   - stop in main
		// *   - additional classpath entries (low prio)
		// *   - additional source lookup (low prio)
		// * 
		// * RAP:
		// *   - servlet path, port, context path
		// *   - session timeout
		// *   - open internal, external, not at all
		// *   - RAP development mode
		// *   - plugin/bundle settings same as for Eclipse (but different)
		// *   - JRE settings (same as Java - but different)
		// * 
		// * How to support different launch config types - some generic attribute support?
		// * Or really implement support for each type separately (probably the best experience).
		// * /
		//LCModel:
		//	configurations+=LaunchConfig*;
		@Override public ParserRule getRule() { return rule; }
		
		//configurations+=LaunchConfig*
		public Assignment getConfigurationsAssignment() { return cConfigurationsAssignment; }
		
		//LaunchConfig
		public RuleCall getConfigurationsLaunchConfigParserRuleCall_0() { return cConfigurationsLaunchConfigParserRuleCall_0; }
	}
	public class LaunchConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.LaunchConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cExplicitAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cExplicitExplicitKeyword_0_0_0 = (Keyword)cExplicitAssignment_0_0.eContents().get(0);
		private final Assignment cManualAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cManualManualKeyword_0_1_0 = (Keyword)cManualAssignment_0_1.eContents().get(0);
		private final Assignment cForegroundAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final Keyword cForegroundForegroundKeyword_0_2_0 = (Keyword)cForegroundAssignment_0_2.eContents().get(0);
		private final Assignment cNoConsoleAssignment_0_3 = (Assignment)cUnorderedGroup_0.eContents().get(3);
		private final Keyword cNoConsoleNoConsoleKeyword_0_3_0 = (Keyword)cNoConsoleAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeLaunchConfigTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cConfigurationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameFQNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperConfigAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperConfigLaunchConfigCrossReference_4_1_0 = (CrossReference)cSuperConfigAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperConfigLaunchConfigFQNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperConfigLaunchConfigCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Assignment cClearsAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cClearsClearOptionParserRuleCall_6_0_0_0 = (RuleCall)cClearsAssignment_6_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Group cGroup_6_1 = (Group)cUnorderedGroup_6.eContents().get(1);
		private final Keyword cWorkspaceKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cWorkspaceAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cWorkspaceAnyPathParserRuleCall_6_1_1_0 = (RuleCall)cWorkspaceAssignment_6_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Group cGroup_6_2 = (Group)cUnorderedGroup_6.eContents().get(2);
		private final Keyword cWorkingDirKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cWorkingDirAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cWorkingDirExistingPathParserRuleCall_6_2_1_0 = (RuleCall)cWorkingDirAssignment_6_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cUnorderedGroup_6.eContents().get(3);
		private final Assignment cMemoryAssignment_6_3_0 = (Assignment)cGroup_6_3.eContents().get(0);
		private final RuleCall cMemoryMemoryOptionParserRuleCall_6_3_0_0 = (RuleCall)cMemoryAssignment_6_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3_1 = (Keyword)cGroup_6_3.eContents().get(1);
		private final Group cGroup_6_4 = (Group)cUnorderedGroup_6.eContents().get(4);
		private final Keyword cProjectKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cProjectAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cProjectProjectParserRuleCall_6_4_1_0 = (RuleCall)cProjectAssignment_6_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_4_2 = (Keyword)cGroup_6_4.eContents().get(2);
		private final Group cGroup_6_5 = (Group)cUnorderedGroup_6.eContents().get(5);
		private final Keyword cMainClassKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Assignment cMainClassAssignment_6_5_1 = (Assignment)cGroup_6_5.eContents().get(1);
		private final RuleCall cMainClassJavaTypeParserRuleCall_6_5_1_0 = (RuleCall)cMainClassAssignment_6_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_5_2 = (Keyword)cGroup_6_5.eContents().get(2);
		private final Assignment cApplicationAssignment_6_6 = (Assignment)cUnorderedGroup_6.eContents().get(6);
		private final RuleCall cApplicationApplicationExtPointParserRuleCall_6_6_0 = (RuleCall)cApplicationAssignment_6_6.eContents().get(0);
		private final Assignment cProductAssignment_6_7 = (Assignment)cUnorderedGroup_6.eContents().get(7);
		private final RuleCall cProductProductExtPointParserRuleCall_6_7_0 = (RuleCall)cProductAssignment_6_7.eContents().get(0);
		private final Assignment cFavoritesAssignment_6_8 = (Assignment)cUnorderedGroup_6.eContents().get(8);
		private final RuleCall cFavoritesFavoritesParserRuleCall_6_8_0 = (RuleCall)cFavoritesAssignment_6_8.eContents().get(0);
		private final Assignment cRedirectAssignment_6_9 = (Assignment)cUnorderedGroup_6.eContents().get(9);
		private final RuleCall cRedirectRedirectParserRuleCall_6_9_0 = (RuleCall)cRedirectAssignment_6_9.eContents().get(0);
		private final Assignment cExecEnvAssignment_6_10 = (Assignment)cUnorderedGroup_6.eContents().get(10);
		private final RuleCall cExecEnvExecutionEnvironmentParserRuleCall_6_10_0 = (RuleCall)cExecEnvAssignment_6_10.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPluginsAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPluginsAddPluginParserRuleCall_7_0_0 = (RuleCall)cPluginsAssignment_7_0.eContents().get(0);
		private final Assignment cIgnoreAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cIgnoreIgnorePluginParserRuleCall_7_1_0 = (RuleCall)cIgnoreAssignment_7_1.eContents().get(0);
		private final Assignment cGroupMembersAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cGroupMembersGroupMemberParserRuleCall_7_2_0 = (RuleCall)cGroupMembersAssignment_7_2.eContents().get(0);
		private final Assignment cVmArgsAssignment_7_3 = (Assignment)cAlternatives_7.eContents().get(3);
		private final RuleCall cVmArgsVmArgumentParserRuleCall_7_3_0 = (RuleCall)cVmArgsAssignment_7_3.eContents().get(0);
		private final Assignment cProgArgsAssignment_7_4 = (Assignment)cAlternatives_7.eContents().get(4);
		private final RuleCall cProgArgsProgramArgumentParserRuleCall_7_4_0 = (RuleCall)cProgArgsAssignment_7_4.eContents().get(0);
		private final Assignment cEnvVarsAssignment_7_5 = (Assignment)cAlternatives_7.eContents().get(5);
		private final RuleCall cEnvVarsEnvironmentVariableParserRuleCall_7_5_0 = (RuleCall)cEnvVarsAssignment_7_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// **
		// * explicit = explicitly defined plug-in list. no auto-resolve of plug-ins.
		// * manual = manually generated through context menu only. no automatic build.
		// * foreground = don't launch in background, but rather block
		// * no-console = don't allocate a console (no stdin then)
		// * /
		//LaunchConfig:
		//	(explicit?='explicit'? & manual?='manual'? & foreground?='foreground'? & noConsole?='no-console'?)
		//	type=LaunchConfigType 'configuration' name=FQName (':' superConfig=[LaunchConfig|FQName])? '{' ((clears=ClearOption
		//	';')? & ('workspace' workspace=AnyPath ';')? & ('working-dir' workingDir=ExistingPath ';')? & (memory=MemoryOption
		//	';')? & ('project' project=Project ';')? // TODO: content assist
		// & ('main-class' mainClass=JavaType ';')?
		//	// TODO: content assist
		// & application=ApplicationExtPoint? // TODO: content assist, validation
		// &
		//	product=ProductExtPoint? // TODO: content assist, validation
		// & favorites=Favorites? & redirect=Redirect? &
		//	execEnv=ExecutionEnvironment? // TODO: content assist, validation
		//) (plugins+=AddPlugin // TODO: content assist
		// |
		//	ignore+=IgnorePlugin // TODO: content assist
		// | groupMembers+=GroupMember
		//	// TODO: content assist, validation, update on rename
		// | vmArgs+=VmArgument | progArgs+=ProgramArgument |
		//	envVars+=EnvironmentVariable)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(explicit?='explicit'? & manual?='manual'? & foreground?='foreground'? & noConsole?='no-console'?) type=LaunchConfigType
		//'configuration' name=FQName (':' superConfig=[LaunchConfig|FQName])? '{' ((clears=ClearOption ';')? & ('workspace'
		//workspace=AnyPath ';')? & ('working-dir' workingDir=ExistingPath ';')? & (memory=MemoryOption ';')? & ('project'
		//project=Project ';')? // TODO: content assist
		// & ('main-class' mainClass=JavaType ';')? // TODO: content assist
		// &
		//application=ApplicationExtPoint? // TODO: content assist, validation
		// & product=ProductExtPoint?
		//// TODO: content assist, validation
		// & favorites=Favorites? & redirect=Redirect? & execEnv=ExecutionEnvironment?
		//// TODO: content assist, validation
		//) (plugins+=AddPlugin // TODO: content assist
		// | ignore+=IgnorePlugin
		//// TODO: content assist
		// | groupMembers+=GroupMember // TODO: content assist, validation, update on rename
		// |
		//vmArgs+=VmArgument | progArgs+=ProgramArgument | envVars+=EnvironmentVariable)* '}'
		public Group getGroup() { return cGroup; }
		
		//(explicit?='explicit'? & manual?='manual'? & foreground?='foreground'? & noConsole?='no-console'?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//explicit?='explicit'?
		public Assignment getExplicitAssignment_0_0() { return cExplicitAssignment_0_0; }
		
		//'explicit'
		public Keyword getExplicitExplicitKeyword_0_0_0() { return cExplicitExplicitKeyword_0_0_0; }
		
		//manual?='manual'?
		public Assignment getManualAssignment_0_1() { return cManualAssignment_0_1; }
		
		//'manual'
		public Keyword getManualManualKeyword_0_1_0() { return cManualManualKeyword_0_1_0; }
		
		//foreground?='foreground'?
		public Assignment getForegroundAssignment_0_2() { return cForegroundAssignment_0_2; }
		
		//'foreground'
		public Keyword getForegroundForegroundKeyword_0_2_0() { return cForegroundForegroundKeyword_0_2_0; }
		
		//noConsole?='no-console'?
		public Assignment getNoConsoleAssignment_0_3() { return cNoConsoleAssignment_0_3; }
		
		//'no-console'
		public Keyword getNoConsoleNoConsoleKeyword_0_3_0() { return cNoConsoleNoConsoleKeyword_0_3_0; }
		
		//type=LaunchConfigType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//LaunchConfigType
		public RuleCall getTypeLaunchConfigTypeEnumRuleCall_1_0() { return cTypeLaunchConfigTypeEnumRuleCall_1_0; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_2() { return cConfigurationKeyword_2; }
		
		//name=FQName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_3_0() { return cNameFQNameParserRuleCall_3_0; }
		
		//(':' superConfig=[LaunchConfig|FQName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//superConfig=[LaunchConfig|FQName]
		public Assignment getSuperConfigAssignment_4_1() { return cSuperConfigAssignment_4_1; }
		
		//[LaunchConfig|FQName]
		public CrossReference getSuperConfigLaunchConfigCrossReference_4_1_0() { return cSuperConfigLaunchConfigCrossReference_4_1_0; }
		
		//FQName
		public RuleCall getSuperConfigLaunchConfigFQNameParserRuleCall_4_1_0_1() { return cSuperConfigLaunchConfigFQNameParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//((clears=ClearOption ';')? & ('workspace' workspace=AnyPath ';')? & ('working-dir' workingDir=ExistingPath ';')? &
		//(memory=MemoryOption ';')? & ('project' project=Project ';')? // TODO: content assist
		// & ('main-class'
		//mainClass=JavaType ';')? // TODO: content assist
		// & application=ApplicationExtPoint?
		//// TODO: content assist, validation
		// & product=ProductExtPoint? // TODO: content assist, validation
		// &
		//favorites=Favorites? & redirect=Redirect? & execEnv=ExecutionEnvironment? // TODO: content assist, validation
		//)
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }
		
		//(clears=ClearOption ';')?
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//clears=ClearOption
		public Assignment getClearsAssignment_6_0_0() { return cClearsAssignment_6_0_0; }
		
		//ClearOption
		public RuleCall getClearsClearOptionParserRuleCall_6_0_0_0() { return cClearsClearOptionParserRuleCall_6_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_0_1() { return cSemicolonKeyword_6_0_1; }
		
		//('workspace' workspace=AnyPath ';')?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'workspace'
		public Keyword getWorkspaceKeyword_6_1_0() { return cWorkspaceKeyword_6_1_0; }
		
		//workspace=AnyPath
		public Assignment getWorkspaceAssignment_6_1_1() { return cWorkspaceAssignment_6_1_1; }
		
		//AnyPath
		public RuleCall getWorkspaceAnyPathParserRuleCall_6_1_1_0() { return cWorkspaceAnyPathParserRuleCall_6_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1_2() { return cSemicolonKeyword_6_1_2; }
		
		//('working-dir' workingDir=ExistingPath ';')?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'working-dir'
		public Keyword getWorkingDirKeyword_6_2_0() { return cWorkingDirKeyword_6_2_0; }
		
		//workingDir=ExistingPath
		public Assignment getWorkingDirAssignment_6_2_1() { return cWorkingDirAssignment_6_2_1; }
		
		//ExistingPath
		public RuleCall getWorkingDirExistingPathParserRuleCall_6_2_1_0() { return cWorkingDirExistingPathParserRuleCall_6_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_2_2() { return cSemicolonKeyword_6_2_2; }
		
		//(memory=MemoryOption ';')?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//memory=MemoryOption
		public Assignment getMemoryAssignment_6_3_0() { return cMemoryAssignment_6_3_0; }
		
		//MemoryOption
		public RuleCall getMemoryMemoryOptionParserRuleCall_6_3_0_0() { return cMemoryMemoryOptionParserRuleCall_6_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_3_1() { return cSemicolonKeyword_6_3_1; }
		
		//('project' project=Project ';')?
		public Group getGroup_6_4() { return cGroup_6_4; }
		
		//'project'
		public Keyword getProjectKeyword_6_4_0() { return cProjectKeyword_6_4_0; }
		
		//project=Project
		public Assignment getProjectAssignment_6_4_1() { return cProjectAssignment_6_4_1; }
		
		//Project
		public RuleCall getProjectProjectParserRuleCall_6_4_1_0() { return cProjectProjectParserRuleCall_6_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_4_2() { return cSemicolonKeyword_6_4_2; }
		
		//('main-class' mainClass=JavaType ';')?
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//'main-class'
		public Keyword getMainClassKeyword_6_5_0() { return cMainClassKeyword_6_5_0; }
		
		//mainClass=JavaType
		public Assignment getMainClassAssignment_6_5_1() { return cMainClassAssignment_6_5_1; }
		
		//JavaType
		public RuleCall getMainClassJavaTypeParserRuleCall_6_5_1_0() { return cMainClassJavaTypeParserRuleCall_6_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_5_2() { return cSemicolonKeyword_6_5_2; }
		
		//application=ApplicationExtPoint?
		public Assignment getApplicationAssignment_6_6() { return cApplicationAssignment_6_6; }
		
		//ApplicationExtPoint
		public RuleCall getApplicationApplicationExtPointParserRuleCall_6_6_0() { return cApplicationApplicationExtPointParserRuleCall_6_6_0; }
		
		//product=ProductExtPoint?
		public Assignment getProductAssignment_6_7() { return cProductAssignment_6_7; }
		
		//ProductExtPoint
		public RuleCall getProductProductExtPointParserRuleCall_6_7_0() { return cProductProductExtPointParserRuleCall_6_7_0; }
		
		//favorites=Favorites?
		public Assignment getFavoritesAssignment_6_8() { return cFavoritesAssignment_6_8; }
		
		//Favorites
		public RuleCall getFavoritesFavoritesParserRuleCall_6_8_0() { return cFavoritesFavoritesParserRuleCall_6_8_0; }
		
		//redirect=Redirect?
		public Assignment getRedirectAssignment_6_9() { return cRedirectAssignment_6_9; }
		
		//Redirect
		public RuleCall getRedirectRedirectParserRuleCall_6_9_0() { return cRedirectRedirectParserRuleCall_6_9_0; }
		
		//execEnv=ExecutionEnvironment?
		public Assignment getExecEnvAssignment_6_10() { return cExecEnvAssignment_6_10; }
		
		//ExecutionEnvironment
		public RuleCall getExecEnvExecutionEnvironmentParserRuleCall_6_10_0() { return cExecEnvExecutionEnvironmentParserRuleCall_6_10_0; }
		
		//(plugins+=AddPlugin // TODO: content assist
		// | ignore+=IgnorePlugin // TODO: content assist
		// | groupMembers+=GroupMember
		//// TODO: content assist, validation, update on rename
		// | vmArgs+=VmArgument | progArgs+=ProgramArgument |
		//envVars+=EnvironmentVariable)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//// things that may appear multiple times
		// plugins+=AddPlugin
		public Assignment getPluginsAssignment_7_0() { return cPluginsAssignment_7_0; }
		
		//AddPlugin
		public RuleCall getPluginsAddPluginParserRuleCall_7_0_0() { return cPluginsAddPluginParserRuleCall_7_0_0; }
		
		//ignore+=IgnorePlugin
		public Assignment getIgnoreAssignment_7_1() { return cIgnoreAssignment_7_1; }
		
		//IgnorePlugin
		public RuleCall getIgnoreIgnorePluginParserRuleCall_7_1_0() { return cIgnoreIgnorePluginParserRuleCall_7_1_0; }
		
		//groupMembers+=GroupMember
		public Assignment getGroupMembersAssignment_7_2() { return cGroupMembersAssignment_7_2; }
		
		//GroupMember
		public RuleCall getGroupMembersGroupMemberParserRuleCall_7_2_0() { return cGroupMembersGroupMemberParserRuleCall_7_2_0; }
		
		//vmArgs+=VmArgument
		public Assignment getVmArgsAssignment_7_3() { return cVmArgsAssignment_7_3; }
		
		//VmArgument
		public RuleCall getVmArgsVmArgumentParserRuleCall_7_3_0() { return cVmArgsVmArgumentParserRuleCall_7_3_0; }
		
		//progArgs+=ProgramArgument
		public Assignment getProgArgsAssignment_7_4() { return cProgArgsAssignment_7_4; }
		
		//ProgramArgument
		public RuleCall getProgArgsProgramArgumentParserRuleCall_7_4_0() { return cProgArgsProgramArgumentParserRuleCall_7_4_0; }
		
		//envVars+=EnvironmentVariable
		public Assignment getEnvVarsAssignment_7_5() { return cEnvVarsAssignment_7_5; }
		
		//EnvironmentVariable
		public RuleCall getEnvVarsEnvironmentVariableParserRuleCall_7_5_0() { return cEnvVarsEnvironmentVariableParserRuleCall_7_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AddPluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.AddPlugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPluginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPluginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPluginPluginParserRuleCall_1_0 = (RuleCall)cPluginAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddPlugin:
		//	'plugin' plugin=Plugin ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'plugin' plugin=Plugin ';'
		public Group getGroup() { return cGroup; }
		
		//'plugin'
		public Keyword getPluginKeyword_0() { return cPluginKeyword_0; }
		
		//plugin=Plugin
		public Assignment getPluginAssignment_1() { return cPluginAssignment_1; }
		
		//Plugin
		public RuleCall getPluginPluginParserRuleCall_1_0() { return cPluginPluginParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class IgnorePluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.IgnorePlugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIgnoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPluginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPluginPluginParserRuleCall_1_0 = (RuleCall)cPluginAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IgnorePlugin:
		//	'ignore' plugin=Plugin ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ignore' plugin=Plugin ';'
		public Group getGroup() { return cGroup; }
		
		//'ignore'
		public Keyword getIgnoreKeyword_0() { return cIgnoreKeyword_0; }
		
		//plugin=Plugin
		public Assignment getPluginAssignment_1() { return cPluginAssignment_1; }
		
		//Plugin
		public RuleCall getPluginPluginParserRuleCall_1_0() { return cPluginPluginParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class VmArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.VmArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVmArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVmArgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VmArgument:
		//	{VmArgument} 'vm-arg' arguments+=STRING* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{VmArgument} 'vm-arg' arguments+=STRING* ';'
		public Group getGroup() { return cGroup; }
		
		//{VmArgument}
		public Action getVmArgumentAction_0() { return cVmArgumentAction_0; }
		
		//'vm-arg'
		public Keyword getVmArgKeyword_1() { return cVmArgKeyword_1; }
		
		//arguments+=STRING*
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//STRING
		public RuleCall getArgumentsSTRINGTerminalRuleCall_2_0() { return cArgumentsSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ProgramArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ProgramArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArgumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProgramArgument:
		//	{ProgramArgument} 'argument' arguments+=STRING* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProgramArgument} 'argument' arguments+=STRING* ';'
		public Group getGroup() { return cGroup; }
		
		//{ProgramArgument}
		public Action getProgramArgumentAction_0() { return cProgramArgumentAction_0; }
		
		//'argument'
		public Keyword getArgumentKeyword_1() { return cArgumentKeyword_1; }
		
		//arguments+=STRING*
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//STRING
		public RuleCall getArgumentsSTRINGTerminalRuleCall_2_0() { return cArgumentsSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnvironmentVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.EnvironmentVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvironmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnvironmentVariable:
		//	{EnvironmentVariable} 'environment' name=ID EQ value=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnvironmentVariable} 'environment' name=ID EQ value=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//{EnvironmentVariable}
		public Action getEnvironmentVariableAction_0() { return cEnvironmentVariableAction_0; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_1() { return cEnvironmentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_3() { return cEQTerminalRuleCall_3; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ApplicationExtPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ApplicationExtPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ApplicationExtPoint:
		//	'application' name=FQName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'application' name=FQName ';'
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=FQName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_1_0() { return cNameFQNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ProductExtPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ProductExtPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ProductExtPoint:
		//	'product' name=FQName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'product' name=FQName ';'
		public Group getGroup() { return cGroup; }
		
		//'product'
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }
		
		//name=FQName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_1_0() { return cNameFQNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class FavoritesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.Favorites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFavoritesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFavoriteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cRunAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cRunRunKeyword_2_0_0 = (Keyword)cRunAssignment_2_0.eContents().get(0);
		private final Assignment cDebugAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cDebugDebugKeyword_2_1_0 = (Keyword)cDebugAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Favorites:
		//	{Favorites} 'favorite' (run?='run'? & debug?='debug'?) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Favorites} 'favorite' (run?='run'? & debug?='debug'?) ';'
		public Group getGroup() { return cGroup; }
		
		//{Favorites}
		public Action getFavoritesAction_0() { return cFavoritesAction_0; }
		
		//'favorite'
		public Keyword getFavoriteKeyword_1() { return cFavoriteKeyword_1; }
		
		//(run?='run'? & debug?='debug'?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//run?='run'?
		public Assignment getRunAssignment_2_0() { return cRunAssignment_2_0; }
		
		//'run'
		public Keyword getRunRunKeyword_2_0_0() { return cRunRunKeyword_2_0_0; }
		
		//debug?='debug'?
		public Assignment getDebugAssignment_2_1() { return cDebugAssignment_2_1; }
		
		//'debug'
		public Keyword getDebugDebugKeyword_2_1_0() { return cDebugDebugKeyword_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RedirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.Redirect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRedirectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRedirectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Assignment cOutWhichAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOutWhichOutputStreamEnumRuleCall_2_0_0_0 = (RuleCall)cOutWhichAssignment_2_0_0.eContents().get(0);
		private final Keyword cToKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cOutFileAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cOutFileAnyPathParserRuleCall_2_0_2_0 = (RuleCall)cOutFileAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Assignment cInWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cInWhichInputStreamEnumRuleCall_2_1_0_0 = (RuleCall)cInWhichAssignment_2_1_0.eContents().get(0);
		private final Keyword cFromKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cInFileAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cInFileExistingPathParserRuleCall_2_1_2_0 = (RuleCall)cInFileAssignment_2_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Redirect:
		//	{Redirect} 'redirect' ((outWhich=OutputStream 'to' outFile=AnyPath)? & (inWhich=InputStream 'from'
		//	inFile=ExistingPath)?) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Redirect} 'redirect' ((outWhich=OutputStream 'to' outFile=AnyPath)? & (inWhich=InputStream 'from'
		//inFile=ExistingPath)?) ';'
		public Group getGroup() { return cGroup; }
		
		//{Redirect}
		public Action getRedirectAction_0() { return cRedirectAction_0; }
		
		//'redirect'
		public Keyword getRedirectKeyword_1() { return cRedirectKeyword_1; }
		
		//((outWhich=OutputStream 'to' outFile=AnyPath)? & (inWhich=InputStream 'from' inFile=ExistingPath)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//(outWhich=OutputStream 'to' outFile=AnyPath)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//outWhich=OutputStream
		public Assignment getOutWhichAssignment_2_0_0() { return cOutWhichAssignment_2_0_0; }
		
		//OutputStream
		public RuleCall getOutWhichOutputStreamEnumRuleCall_2_0_0_0() { return cOutWhichOutputStreamEnumRuleCall_2_0_0_0; }
		
		//'to'
		public Keyword getToKeyword_2_0_1() { return cToKeyword_2_0_1; }
		
		//outFile=AnyPath
		public Assignment getOutFileAssignment_2_0_2() { return cOutFileAssignment_2_0_2; }
		
		//AnyPath
		public RuleCall getOutFileAnyPathParserRuleCall_2_0_2_0() { return cOutFileAnyPathParserRuleCall_2_0_2_0; }
		
		//(inWhich=InputStream 'from' inFile=ExistingPath)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//inWhich=InputStream
		public Assignment getInWhichAssignment_2_1_0() { return cInWhichAssignment_2_1_0; }
		
		//InputStream
		public RuleCall getInWhichInputStreamEnumRuleCall_2_1_0_0() { return cInWhichInputStreamEnumRuleCall_2_1_0_0; }
		
		//'from'
		public Keyword getFromKeyword_2_1_1() { return cFromKeyword_2_1_1; }
		
		//inFile=ExistingPath
		public Assignment getInFileAssignment_2_1_2() { return cInFileAssignment_2_1_2; }
		
		//ExistingPath
		public RuleCall getInFileExistingPathParserRuleCall_2_1_2_0() { return cInFileExistingPathParserRuleCall_2_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExecutionEnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ExecutionEnvironment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExecutionEnvironment:
		//	'execution-environment' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'execution-environment' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'execution-environment'
		public Keyword getExecutionEnvironmentKeyword_0() { return cExecutionEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExistingPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnyPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Path:
		//	ExistingPath | AnyPath;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistingPath | AnyPath
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExistingPath
		public RuleCall getExistingPathParserRuleCall_0() { return cExistingPathParserRuleCall_0; }
		
		//AnyPath
		public RuleCall getAnyPathParserRuleCall_1() { return cAnyPathParserRuleCall_1; }
	}
	public class ExistingPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ExistingPath");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExistingPath:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class AnyPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.AnyPath");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AnyPath:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class PluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.Plugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFQNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVERSIONTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		
		//Plugin:
		//	name=FQName version=VERSION?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=FQName version=VERSION?
		public Group getGroup() { return cGroup; }
		
		//name=FQName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_0_0() { return cNameFQNameParserRuleCall_0_0; }
		
		//version=VERSION?
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }
		
		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_1_0() { return cVersionVERSIONTerminalRuleCall_1_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.Project");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameFQNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Project:
		//	name=FQName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=FQName
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_0() { return cNameFQNameParserRuleCall_0; }
	}
	public class JavaTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.JavaType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameFQNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//JavaType:
		//	name=FQName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=FQName
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//FQName
		public RuleCall getNameFQNameParserRuleCall_0() { return cNameFQNameParserRuleCall_0; }
	}
	public class ClearOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ClearOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClearOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cWorkspaceAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cWorkspaceWorkspaceKeyword_2_0_0_0_0 = (Keyword)cWorkspaceAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cLogAssignment_2_0_0_1 = (Assignment)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cLogLogKeyword_2_0_0_1_0 = (Keyword)cLogAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cNoAskClearAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cNoAskClearExclamationMarkKeyword_2_0_1_0 = (Keyword)cNoAskClearAssignment_2_0_1.eContents().get(0);
		private final Assignment cConfigAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cConfigConfigKeyword_2_1_0 = (Keyword)cConfigAssignment_2_1.eContents().get(0);
		
		//ClearOption:
		//	{ClearOption} 'clear' (((workspace?='workspace' | log?='log') noAskClear?='!'?)? & config?='config'?);
		@Override public ParserRule getRule() { return rule; }
		
		//{ClearOption} 'clear' (((workspace?='workspace' | log?='log') noAskClear?='!'?)? & config?='config'?)
		public Group getGroup() { return cGroup; }
		
		//{ClearOption}
		public Action getClearOptionAction_0() { return cClearOptionAction_0; }
		
		//'clear'
		public Keyword getClearKeyword_1() { return cClearKeyword_1; }
		
		//(((workspace?='workspace' | log?='log') noAskClear?='!'?)? & config?='config'?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//((workspace?='workspace' | log?='log') noAskClear?='!'?)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//(workspace?='workspace' | log?='log')
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//workspace?='workspace'
		public Assignment getWorkspaceAssignment_2_0_0_0() { return cWorkspaceAssignment_2_0_0_0; }
		
		//'workspace'
		public Keyword getWorkspaceWorkspaceKeyword_2_0_0_0_0() { return cWorkspaceWorkspaceKeyword_2_0_0_0_0; }
		
		//log?='log'
		public Assignment getLogAssignment_2_0_0_1() { return cLogAssignment_2_0_0_1; }
		
		//'log'
		public Keyword getLogLogKeyword_2_0_0_1_0() { return cLogLogKeyword_2_0_0_1_0; }
		
		//noAskClear?='!'?
		public Assignment getNoAskClearAssignment_2_0_1() { return cNoAskClearAssignment_2_0_1; }
		
		//'!'
		public Keyword getNoAskClearExclamationMarkKeyword_2_0_1_0() { return cNoAskClearExclamationMarkKeyword_2_0_1_0; }
		
		//config?='config'?
		public Assignment getConfigAssignment_2_1() { return cConfigAssignment_2_1; }
		
		//'config'
		public Keyword getConfigConfigKeyword_2_1_0() { return cConfigConfigKeyword_2_1_0; }
	}
	public class MemoryOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.MemoryOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoryOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMemoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cMinKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cMinAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_2_0_2_0 = (RuleCall)cMinAssignment_2_0_2.eContents().get(0);
		private final Assignment cMinUnitAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cMinUnitMemoryUnitEnumRuleCall_2_0_3_0 = (RuleCall)cMinUnitAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cMaxKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cMaxAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_2_1_2_0 = (RuleCall)cMaxAssignment_2_1_2.eContents().get(0);
		private final Assignment cMaxUnitAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cMaxUnitMemoryUnitEnumRuleCall_2_1_3_0 = (RuleCall)cMaxUnitAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cPermKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cEQTerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cPermAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cPermINTTerminalRuleCall_2_2_2_0 = (RuleCall)cPermAssignment_2_2_2.eContents().get(0);
		private final Assignment cPermUnitAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cPermUnitMemoryUnitEnumRuleCall_2_2_3_0 = (RuleCall)cPermUnitAssignment_2_2_3.eContents().get(0);
		
		//MemoryOption:
		//	{MemoryOption} 'memory' (('min' EQ min=INT minUnit=MemoryUnit)? & ('max' EQ max=INT maxUnit=MemoryUnit)? & ('perm' EQ
		//	perm=INT permUnit=MemoryUnit)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoryOption} 'memory' (('min' EQ min=INT minUnit=MemoryUnit)? & ('max' EQ max=INT maxUnit=MemoryUnit)? & ('perm' EQ
		//perm=INT permUnit=MemoryUnit)?)
		public Group getGroup() { return cGroup; }
		
		//{MemoryOption}
		public Action getMemoryOptionAction_0() { return cMemoryOptionAction_0; }
		
		//'memory'
		public Keyword getMemoryKeyword_1() { return cMemoryKeyword_1; }
		
		//(('min' EQ min=INT minUnit=MemoryUnit)? & ('max' EQ max=INT maxUnit=MemoryUnit)? & ('perm' EQ perm=INT
		//permUnit=MemoryUnit)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('min' EQ min=INT minUnit=MemoryUnit)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'min'
		public Keyword getMinKeyword_2_0_0() { return cMinKeyword_2_0_0; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_2_0_1() { return cEQTerminalRuleCall_2_0_1; }
		
		//min=INT
		public Assignment getMinAssignment_2_0_2() { return cMinAssignment_2_0_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_2_0_2_0() { return cMinINTTerminalRuleCall_2_0_2_0; }
		
		//minUnit=MemoryUnit
		public Assignment getMinUnitAssignment_2_0_3() { return cMinUnitAssignment_2_0_3; }
		
		//MemoryUnit
		public RuleCall getMinUnitMemoryUnitEnumRuleCall_2_0_3_0() { return cMinUnitMemoryUnitEnumRuleCall_2_0_3_0; }
		
		//('max' EQ max=INT maxUnit=MemoryUnit)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'max'
		public Keyword getMaxKeyword_2_1_0() { return cMaxKeyword_2_1_0; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_2_1_1() { return cEQTerminalRuleCall_2_1_1; }
		
		//max=INT
		public Assignment getMaxAssignment_2_1_2() { return cMaxAssignment_2_1_2; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_2_1_2_0() { return cMaxINTTerminalRuleCall_2_1_2_0; }
		
		//maxUnit=MemoryUnit
		public Assignment getMaxUnitAssignment_2_1_3() { return cMaxUnitAssignment_2_1_3; }
		
		//MemoryUnit
		public RuleCall getMaxUnitMemoryUnitEnumRuleCall_2_1_3_0() { return cMaxUnitMemoryUnitEnumRuleCall_2_1_3_0; }
		
		//('perm' EQ perm=INT permUnit=MemoryUnit)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'perm'
		public Keyword getPermKeyword_2_2_0() { return cPermKeyword_2_2_0; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_2_2_1() { return cEQTerminalRuleCall_2_2_1; }
		
		//perm=INT
		public Assignment getPermAssignment_2_2_2() { return cPermAssignment_2_2_2; }
		
		//INT
		public RuleCall getPermINTTerminalRuleCall_2_2_2_0() { return cPermINTTerminalRuleCall_2_2_2_0; }
		
		//permUnit=MemoryUnit
		public Assignment getPermUnitAssignment_2_2_3() { return cPermUnitAssignment_2_2_3; }
		
		//MemoryUnit
		public RuleCall getPermUnitMemoryUnitEnumRuleCall_2_2_3_0() { return cPermUnitMemoryUnitEnumRuleCall_2_2_3_0; }
	}
	public class GroupMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.GroupMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cTypeLaunchModeTypeEnumRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cAdoptAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cAdoptAdoptKeyword_0_1_0 = (Keyword)cAdoptAssignment_0_1.eContents().get(0);
		private final Keyword cMemberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMemberLaunchConfigCrossReference_2_0 = (CrossReference)cMemberAssignment_2.eContents().get(0);
		private final RuleCall cMemberLaunchConfigFQNameParserRuleCall_2_0_1 = (RuleCall)cMemberLaunchConfigCrossReference_2_0.eContents().get(1);
		private final Assignment cPostActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPostActionGroupPostLaunchActionParserRuleCall_3_0 = (RuleCall)cPostActionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GroupMember:
		//	(type?=LaunchModeType? & adopt?='adopt'?) 'member' member=[LaunchConfig|FQName] postAction?=GroupPostLaunchAction?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//(type?=LaunchModeType? & adopt?='adopt'?) 'member' member=[LaunchConfig|FQName] postAction?=GroupPostLaunchAction? ';'
		public Group getGroup() { return cGroup; }
		
		//(type?=LaunchModeType? & adopt?='adopt'?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//type?=LaunchModeType?
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//LaunchModeType
		public RuleCall getTypeLaunchModeTypeEnumRuleCall_0_0_0() { return cTypeLaunchModeTypeEnumRuleCall_0_0_0; }
		
		//adopt?='adopt'?
		public Assignment getAdoptAssignment_0_1() { return cAdoptAssignment_0_1; }
		
		//'adopt'
		public Keyword getAdoptAdoptKeyword_0_1_0() { return cAdoptAdoptKeyword_0_1_0; }
		
		//'member'
		public Keyword getMemberKeyword_1() { return cMemberKeyword_1; }
		
		//member=[LaunchConfig|FQName]
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }
		
		//[LaunchConfig|FQName]
		public CrossReference getMemberLaunchConfigCrossReference_2_0() { return cMemberLaunchConfigCrossReference_2_0; }
		
		//FQName
		public RuleCall getMemberLaunchConfigFQNameParserRuleCall_2_0_1() { return cMemberLaunchConfigFQNameParserRuleCall_2_0_1; }
		
		//postAction?=GroupPostLaunchAction?
		public Assignment getPostActionAssignment_3() { return cPostActionAssignment_3; }
		
		//GroupPostLaunchAction
		public RuleCall getPostActionGroupPostLaunchActionParserRuleCall_3_0() { return cPostActionGroupPostLaunchActionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class GroupPostLaunchActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.GroupPostLaunchAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupPostLaunchDelayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupPostLaunchRegexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGroupPostLaunchWaitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GroupPostLaunchAction:
		//	GroupPostLaunchDelay | GroupPostLaunchRegex | GroupPostLaunchWait;
		@Override public ParserRule getRule() { return rule; }
		
		//GroupPostLaunchDelay | GroupPostLaunchRegex | GroupPostLaunchWait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GroupPostLaunchDelay
		public RuleCall getGroupPostLaunchDelayParserRuleCall_0() { return cGroupPostLaunchDelayParserRuleCall_0; }
		
		//GroupPostLaunchRegex
		public RuleCall getGroupPostLaunchRegexParserRuleCall_1() { return cGroupPostLaunchRegexParserRuleCall_1; }
		
		//GroupPostLaunchWait
		public RuleCall getGroupPostLaunchWaitParserRuleCall_2() { return cGroupPostLaunchWaitParserRuleCall_2; }
	}
	public class GroupPostLaunchDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.GroupPostLaunchDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		
		//GroupPostLaunchDelay:
		//	'delay' delay=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'delay' delay=INT
		public Group getGroup() { return cGroup; }
		
		//'delay'
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }
		
		//delay=INT
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }
		
		//INT
		public RuleCall getDelayINTTerminalRuleCall_1_0() { return cDelayINTTerminalRuleCall_1_0; }
	}
	public class GroupPostLaunchRegexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.GroupPostLaunchRegex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegexSTRINGTerminalRuleCall_1_0 = (RuleCall)cRegexAssignment_1.eContents().get(0);
		
		//GroupPostLaunchRegex:
		//	'regex' regex=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'regex' regex=STRING
		public Group getGroup() { return cGroup; }
		
		//'regex'
		public Keyword getRegexKeyword_0() { return cRegexKeyword_0; }
		
		//regex=STRING
		public Assignment getRegexAssignment_1() { return cRegexAssignment_1; }
		
		//STRING
		public RuleCall getRegexSTRINGTerminalRuleCall_1_0() { return cRegexSTRINGTerminalRuleCall_1_0; }
	}
	public class GroupPostLaunchWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.GroupPostLaunchWait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupPostLaunchWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GroupPostLaunchWait:
		//	{GroupPostLaunchWait} 'wait';
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupPostLaunchWait} 'wait'
		public Group getGroup() { return cGroup; }
		
		//{GroupPostLaunchWait}
		public Action getGroupPostLaunchWaitAction_0() { return cGroupPostLaunchWaitAction_0; }
		
		//'wait'
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }
	}
	public class FQNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.FQName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// **
		// * A possibly fully qualified name (separated by '.').
		// * / FQName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class LaunchConfigTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.LaunchConfigType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJAVAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJAVAJavaKeyword_0_0 = (Keyword)cJAVAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cECLIPSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cECLIPSEEclipseKeyword_1_0 = (Keyword)cECLIPSEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRAPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRAPRapKeyword_2_0 = (Keyword)cRAPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGROUPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGROUPGroupKeyword_3_0 = (Keyword)cGROUPEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LaunchConfigType:
		//	JAVA="java" | ECLIPSE="eclipse" | RAP="rap" | GROUP="group";
		public EnumRule getRule() { return rule; }
		
		//JAVA="java" | ECLIPSE="eclipse" | RAP="rap" | GROUP="group"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JAVA="java"
		public EnumLiteralDeclaration getJAVAEnumLiteralDeclaration_0() { return cJAVAEnumLiteralDeclaration_0; }
		
		//"java"
		public Keyword getJAVAJavaKeyword_0_0() { return cJAVAJavaKeyword_0_0; }
		
		//ECLIPSE="eclipse"
		public EnumLiteralDeclaration getECLIPSEEnumLiteralDeclaration_1() { return cECLIPSEEnumLiteralDeclaration_1; }
		
		//"eclipse"
		public Keyword getECLIPSEEclipseKeyword_1_0() { return cECLIPSEEclipseKeyword_1_0; }
		
		//RAP="rap"
		public EnumLiteralDeclaration getRAPEnumLiteralDeclaration_2() { return cRAPEnumLiteralDeclaration_2; }
		
		//"rap"
		public Keyword getRAPRapKeyword_2_0() { return cRAPRapKeyword_2_0; }
		
		//GROUP="group"
		public EnumLiteralDeclaration getGROUPEnumLiteralDeclaration_3() { return cGROUPEnumLiteralDeclaration_3; }
		
		//"group"
		public Keyword getGROUPGroupKeyword_3_0() { return cGROUPGroupKeyword_3_0; }
	}
	public class LaunchModeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.LaunchModeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRUNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRUNRunKeyword_0_0 = (Keyword)cRUNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEBUGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEBUGDebugKeyword_1_0 = (Keyword)cDEBUGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROFILEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROFILEProfileKeyword_2_0 = (Keyword)cPROFILEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOVERAGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOVERAGECoverageKeyword_3_0 = (Keyword)cCOVERAGEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINHERITEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINHERITInheritKeyword_4_0 = (Keyword)cINHERITEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum LaunchModeType:
		//	RUN="run" | DEBUG="debug" | PROFILE="profile" | COVERAGE="coverage" | INHERIT="inherit";
		public EnumRule getRule() { return rule; }
		
		//RUN="run" | DEBUG="debug" | PROFILE="profile" | COVERAGE="coverage" | INHERIT="inherit"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RUN="run"
		public EnumLiteralDeclaration getRUNEnumLiteralDeclaration_0() { return cRUNEnumLiteralDeclaration_0; }
		
		//"run"
		public Keyword getRUNRunKeyword_0_0() { return cRUNRunKeyword_0_0; }
		
		//DEBUG="debug"
		public EnumLiteralDeclaration getDEBUGEnumLiteralDeclaration_1() { return cDEBUGEnumLiteralDeclaration_1; }
		
		//"debug"
		public Keyword getDEBUGDebugKeyword_1_0() { return cDEBUGDebugKeyword_1_0; }
		
		//PROFILE="profile"
		public EnumLiteralDeclaration getPROFILEEnumLiteralDeclaration_2() { return cPROFILEEnumLiteralDeclaration_2; }
		
		//"profile"
		public Keyword getPROFILEProfileKeyword_2_0() { return cPROFILEProfileKeyword_2_0; }
		
		//COVERAGE="coverage"
		public EnumLiteralDeclaration getCOVERAGEEnumLiteralDeclaration_3() { return cCOVERAGEEnumLiteralDeclaration_3; }
		
		//"coverage"
		public Keyword getCOVERAGECoverageKeyword_3_0() { return cCOVERAGECoverageKeyword_3_0; }
		
		//INHERIT="inherit"
		public EnumLiteralDeclaration getINHERITEnumLiteralDeclaration_4() { return cINHERITEnumLiteralDeclaration_4; }
		
		//"inherit"
		public Keyword getINHERITInheritKeyword_4_0() { return cINHERITInheritKeyword_4_0; }
	}
	public class MemoryUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.MemoryUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMBMBKeyword_0_0 = (Keyword)cMBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMBMbKeyword_1_0 = (Keyword)cMBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMBMKeyword_2_0 = (Keyword)cMBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMBMKeyword_3_0 = (Keyword)cMBEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGBEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGBGBKeyword_4_0 = (Keyword)cGBEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGBEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGBGbKeyword_5_0 = (Keyword)cGBEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGBEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGBGKeyword_6_0 = (Keyword)cGBEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGBEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGBGKeyword_7_0 = (Keyword)cGBEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum MemoryUnit:
		//	MB | MB='mb' | MB='M' | MB='m' | GB | GB='gb' | GB='G' | GB='g';
		public EnumRule getRule() { return rule; }
		
		//MB | MB='mb' | MB='M' | MB='m' | GB | GB='gb' | GB='G' | GB='g'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MB
		public EnumLiteralDeclaration getMBEnumLiteralDeclaration_0() { return cMBEnumLiteralDeclaration_0; }
		
		//'MB'
		public Keyword getMBMBKeyword_0_0() { return cMBMBKeyword_0_0; }
		
		//MB='mb'
		public EnumLiteralDeclaration getMBEnumLiteralDeclaration_1() { return cMBEnumLiteralDeclaration_1; }
		
		//'mb'
		public Keyword getMBMbKeyword_1_0() { return cMBMbKeyword_1_0; }
		
		//MB='M'
		public EnumLiteralDeclaration getMBEnumLiteralDeclaration_2() { return cMBEnumLiteralDeclaration_2; }
		
		//'M'
		public Keyword getMBMKeyword_2_0() { return cMBMKeyword_2_0; }
		
		//MB='m'
		public EnumLiteralDeclaration getMBEnumLiteralDeclaration_3() { return cMBEnumLiteralDeclaration_3; }
		
		//'m'
		public Keyword getMBMKeyword_3_0() { return cMBMKeyword_3_0; }
		
		//GB
		public EnumLiteralDeclaration getGBEnumLiteralDeclaration_4() { return cGBEnumLiteralDeclaration_4; }
		
		//'GB'
		public Keyword getGBGBKeyword_4_0() { return cGBGBKeyword_4_0; }
		
		//GB='gb'
		public EnumLiteralDeclaration getGBEnumLiteralDeclaration_5() { return cGBEnumLiteralDeclaration_5; }
		
		//'gb'
		public Keyword getGBGbKeyword_5_0() { return cGBGbKeyword_5_0; }
		
		//GB='G'
		public EnumLiteralDeclaration getGBEnumLiteralDeclaration_6() { return cGBEnumLiteralDeclaration_6; }
		
		//'G'
		public Keyword getGBGKeyword_6_0() { return cGBGKeyword_6_0; }
		
		//GB='g'
		public EnumLiteralDeclaration getGBEnumLiteralDeclaration_7() { return cGBEnumLiteralDeclaration_7; }
		
		//'g'
		public Keyword getGBGKeyword_7_0() { return cGBGKeyword_7_0; }
	}
	public class OutputStreamElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.OutputStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTDOUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTDOUTStdoutKeyword_0_0 = (Keyword)cSTDOUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTDERREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTDERRStderrKeyword_1_0 = (Keyword)cSTDERREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOTHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOTHBothOutKeyword_2_0 = (Keyword)cBOTHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OutputStream:
		//	STDOUT="stdout" | STDERR="stderr" | BOTH="both-out";
		public EnumRule getRule() { return rule; }
		
		//STDOUT="stdout" | STDERR="stderr" | BOTH="both-out"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STDOUT="stdout"
		public EnumLiteralDeclaration getSTDOUTEnumLiteralDeclaration_0() { return cSTDOUTEnumLiteralDeclaration_0; }
		
		//"stdout"
		public Keyword getSTDOUTStdoutKeyword_0_0() { return cSTDOUTStdoutKeyword_0_0; }
		
		//STDERR="stderr"
		public EnumLiteralDeclaration getSTDERREnumLiteralDeclaration_1() { return cSTDERREnumLiteralDeclaration_1; }
		
		//"stderr"
		public Keyword getSTDERRStderrKeyword_1_0() { return cSTDERRStderrKeyword_1_0; }
		
		//BOTH="both-out"
		public EnumLiteralDeclaration getBOTHEnumLiteralDeclaration_2() { return cBOTHEnumLiteralDeclaration_2; }
		
		//"both-out"
		public Keyword getBOTHBothOutKeyword_2_0() { return cBOTHBothOutKeyword_2_0; }
	}
	public class InputStreamElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.InputStream");
		private final EnumLiteralDeclaration cSTDINEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSTDINStdinKeyword_0 = (Keyword)cSTDINEnumLiteralDeclaration.eContents().get(0);
		
		//enum InputStream:
		//	STDIN="stdin";
		public EnumRule getRule() { return rule; }
		
		//STDIN="stdin"
		public EnumLiteralDeclaration getSTDINEnumLiteralDeclaration() { return cSTDINEnumLiteralDeclaration; }
		
		//"stdin"
		public Keyword getSTDINStdinKeyword_0() { return cSTDINStdinKeyword_0; }
	}
	
	private final LCModelElements pLCModel;
	private final LaunchConfigElements pLaunchConfig;
	private final AddPluginElements pAddPlugin;
	private final IgnorePluginElements pIgnorePlugin;
	private final VmArgumentElements pVmArgument;
	private final ProgramArgumentElements pProgramArgument;
	private final EnvironmentVariableElements pEnvironmentVariable;
	private final ApplicationExtPointElements pApplicationExtPoint;
	private final ProductExtPointElements pProductExtPoint;
	private final FavoritesElements pFavorites;
	private final RedirectElements pRedirect;
	private final ExecutionEnvironmentElements pExecutionEnvironment;
	private final PathElements pPath;
	private final ExistingPathElements pExistingPath;
	private final AnyPathElements pAnyPath;
	private final PluginElements pPlugin;
	private final ProjectElements pProject;
	private final JavaTypeElements pJavaType;
	private final ClearOptionElements pClearOption;
	private final MemoryOptionElements pMemoryOption;
	private final GroupMemberElements pGroupMember;
	private final GroupPostLaunchActionElements pGroupPostLaunchAction;
	private final GroupPostLaunchDelayElements pGroupPostLaunchDelay;
	private final GroupPostLaunchRegexElements pGroupPostLaunchRegex;
	private final GroupPostLaunchWaitElements pGroupPostLaunchWait;
	private final FQNameElements pFQName;
	private final LaunchConfigTypeElements eLaunchConfigType;
	private final LaunchModeTypeElements eLaunchModeType;
	private final MemoryUnitElements eMemoryUnit;
	private final OutputStreamElements eOutputStream;
	private final InputStreamElements eInputStream;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tQUALIFIER;
	private final TerminalRule tVERSION;
	private final TerminalRule tEQ;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LcDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLCModel = new LCModelElements();
		this.pLaunchConfig = new LaunchConfigElements();
		this.pAddPlugin = new AddPluginElements();
		this.pIgnorePlugin = new IgnorePluginElements();
		this.pVmArgument = new VmArgumentElements();
		this.pProgramArgument = new ProgramArgumentElements();
		this.pEnvironmentVariable = new EnvironmentVariableElements();
		this.pApplicationExtPoint = new ApplicationExtPointElements();
		this.pProductExtPoint = new ProductExtPointElements();
		this.pFavorites = new FavoritesElements();
		this.pRedirect = new RedirectElements();
		this.pExecutionEnvironment = new ExecutionEnvironmentElements();
		this.pPath = new PathElements();
		this.pExistingPath = new ExistingPathElements();
		this.pAnyPath = new AnyPathElements();
		this.pPlugin = new PluginElements();
		this.pProject = new ProjectElements();
		this.pJavaType = new JavaTypeElements();
		this.pClearOption = new ClearOptionElements();
		this.pMemoryOption = new MemoryOptionElements();
		this.pGroupMember = new GroupMemberElements();
		this.pGroupPostLaunchAction = new GroupPostLaunchActionElements();
		this.pGroupPostLaunchDelay = new GroupPostLaunchDelayElements();
		this.pGroupPostLaunchRegex = new GroupPostLaunchRegexElements();
		this.pGroupPostLaunchWait = new GroupPostLaunchWaitElements();
		this.pFQName = new FQNameElements();
		this.eLaunchConfigType = new LaunchConfigTypeElements();
		this.eLaunchModeType = new LaunchModeTypeElements();
		this.eMemoryUnit = new MemoryUnitElements();
		this.eOutputStream = new OutputStreamElements();
		this.eInputStream = new InputStreamElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.ID");
		this.tQUALIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.QUALIFIER");
		this.tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.VERSION");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.wamas.ide.launching.LcDsl.EQ");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.wamas.ide.launching.LcDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// **
	// * TODO: The language is still missing some things that could be set:
	// * 
	// * General: variable expansion for all paths (string subst, system properties)!
	// * 
	// * Common:
	// *   - stdout/stderr redirection support, console allocation, ...
	// * 
	// * Eclipse:
	// *   - support for setting Java runtime environment settings
	// *   - validate plugins automatically prior to launching
	// *   - plugin start level settings (start leven & autostart)
	// *   - config.ini related settings
	// *   - software installation support setting
	// *   - tracing settings
	// *   - environment: append vs. replace setting
	// * 
	// * Java:
	// *   - support for setting JRE
	// *   - main class search settings (system libraries, inheritence)
	// *   - stop in main
	// *   - additional classpath entries (low prio)
	// *   - additional source lookup (low prio)
	// * 
	// * RAP:
	// *   - servlet path, port, context path
	// *   - session timeout
	// *   - open internal, external, not at all
	// *   - RAP development mode
	// *   - plugin/bundle settings same as for Eclipse (but different)
	// *   - JRE settings (same as Java - but different)
	// * 
	// * How to support different launch config types - some generic attribute support?
	// * Or really implement support for each type separately (probably the best experience).
	// * /
	//LCModel:
	//	configurations+=LaunchConfig*;
	public LCModelElements getLCModelAccess() {
		return pLCModel;
	}
	
	public ParserRule getLCModelRule() {
		return getLCModelAccess().getRule();
	}
	
	/// **
	// * explicit = explicitly defined plug-in list. no auto-resolve of plug-ins.
	// * manual = manually generated through context menu only. no automatic build.
	// * foreground = don't launch in background, but rather block
	// * no-console = don't allocate a console (no stdin then)
	// * /
	//LaunchConfig:
	//	(explicit?='explicit'? & manual?='manual'? & foreground?='foreground'? & noConsole?='no-console'?)
	//	type=LaunchConfigType 'configuration' name=FQName (':' superConfig=[LaunchConfig|FQName])? '{' ((clears=ClearOption
	//	';')? & ('workspace' workspace=AnyPath ';')? & ('working-dir' workingDir=ExistingPath ';')? & (memory=MemoryOption
	//	';')? & ('project' project=Project ';')? // TODO: content assist
	// & ('main-class' mainClass=JavaType ';')?
	//	// TODO: content assist
	// & application=ApplicationExtPoint? // TODO: content assist, validation
	// &
	//	product=ProductExtPoint? // TODO: content assist, validation
	// & favorites=Favorites? & redirect=Redirect? &
	//	execEnv=ExecutionEnvironment? // TODO: content assist, validation
	//) (plugins+=AddPlugin // TODO: content assist
	// |
	//	ignore+=IgnorePlugin // TODO: content assist
	// | groupMembers+=GroupMember
	//	// TODO: content assist, validation, update on rename
	// | vmArgs+=VmArgument | progArgs+=ProgramArgument |
	//	envVars+=EnvironmentVariable)* '}';
	public LaunchConfigElements getLaunchConfigAccess() {
		return pLaunchConfig;
	}
	
	public ParserRule getLaunchConfigRule() {
		return getLaunchConfigAccess().getRule();
	}
	
	//AddPlugin:
	//	'plugin' plugin=Plugin ';';
	public AddPluginElements getAddPluginAccess() {
		return pAddPlugin;
	}
	
	public ParserRule getAddPluginRule() {
		return getAddPluginAccess().getRule();
	}
	
	//IgnorePlugin:
	//	'ignore' plugin=Plugin ';';
	public IgnorePluginElements getIgnorePluginAccess() {
		return pIgnorePlugin;
	}
	
	public ParserRule getIgnorePluginRule() {
		return getIgnorePluginAccess().getRule();
	}
	
	//VmArgument:
	//	{VmArgument} 'vm-arg' arguments+=STRING* ';';
	public VmArgumentElements getVmArgumentAccess() {
		return pVmArgument;
	}
	
	public ParserRule getVmArgumentRule() {
		return getVmArgumentAccess().getRule();
	}
	
	//ProgramArgument:
	//	{ProgramArgument} 'argument' arguments+=STRING* ';';
	public ProgramArgumentElements getProgramArgumentAccess() {
		return pProgramArgument;
	}
	
	public ParserRule getProgramArgumentRule() {
		return getProgramArgumentAccess().getRule();
	}
	
	//EnvironmentVariable:
	//	{EnvironmentVariable} 'environment' name=ID EQ value=STRING ';';
	public EnvironmentVariableElements getEnvironmentVariableAccess() {
		return pEnvironmentVariable;
	}
	
	public ParserRule getEnvironmentVariableRule() {
		return getEnvironmentVariableAccess().getRule();
	}
	
	//ApplicationExtPoint:
	//	'application' name=FQName ';';
	public ApplicationExtPointElements getApplicationExtPointAccess() {
		return pApplicationExtPoint;
	}
	
	public ParserRule getApplicationExtPointRule() {
		return getApplicationExtPointAccess().getRule();
	}
	
	//ProductExtPoint:
	//	'product' name=FQName ';';
	public ProductExtPointElements getProductExtPointAccess() {
		return pProductExtPoint;
	}
	
	public ParserRule getProductExtPointRule() {
		return getProductExtPointAccess().getRule();
	}
	
	//Favorites:
	//	{Favorites} 'favorite' (run?='run'? & debug?='debug'?) ';';
	public FavoritesElements getFavoritesAccess() {
		return pFavorites;
	}
	
	public ParserRule getFavoritesRule() {
		return getFavoritesAccess().getRule();
	}
	
	//Redirect:
	//	{Redirect} 'redirect' ((outWhich=OutputStream 'to' outFile=AnyPath)? & (inWhich=InputStream 'from'
	//	inFile=ExistingPath)?) ';';
	public RedirectElements getRedirectAccess() {
		return pRedirect;
	}
	
	public ParserRule getRedirectRule() {
		return getRedirectAccess().getRule();
	}
	
	//ExecutionEnvironment:
	//	'execution-environment' name=ID ';';
	public ExecutionEnvironmentElements getExecutionEnvironmentAccess() {
		return pExecutionEnvironment;
	}
	
	public ParserRule getExecutionEnvironmentRule() {
		return getExecutionEnvironmentAccess().getRule();
	}
	
	//Path:
	//	ExistingPath | AnyPath;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//ExistingPath:
	//	name=STRING;
	public ExistingPathElements getExistingPathAccess() {
		return pExistingPath;
	}
	
	public ParserRule getExistingPathRule() {
		return getExistingPathAccess().getRule();
	}
	
	//AnyPath:
	//	name=STRING;
	public AnyPathElements getAnyPathAccess() {
		return pAnyPath;
	}
	
	public ParserRule getAnyPathRule() {
		return getAnyPathAccess().getRule();
	}
	
	//Plugin:
	//	name=FQName version=VERSION?;
	public PluginElements getPluginAccess() {
		return pPlugin;
	}
	
	public ParserRule getPluginRule() {
		return getPluginAccess().getRule();
	}
	
	//Project:
	//	name=FQName;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//JavaType:
	//	name=FQName;
	public JavaTypeElements getJavaTypeAccess() {
		return pJavaType;
	}
	
	public ParserRule getJavaTypeRule() {
		return getJavaTypeAccess().getRule();
	}
	
	//ClearOption:
	//	{ClearOption} 'clear' (((workspace?='workspace' | log?='log') noAskClear?='!'?)? & config?='config'?);
	public ClearOptionElements getClearOptionAccess() {
		return pClearOption;
	}
	
	public ParserRule getClearOptionRule() {
		return getClearOptionAccess().getRule();
	}
	
	//MemoryOption:
	//	{MemoryOption} 'memory' (('min' EQ min=INT minUnit=MemoryUnit)? & ('max' EQ max=INT maxUnit=MemoryUnit)? & ('perm' EQ
	//	perm=INT permUnit=MemoryUnit)?);
	public MemoryOptionElements getMemoryOptionAccess() {
		return pMemoryOption;
	}
	
	public ParserRule getMemoryOptionRule() {
		return getMemoryOptionAccess().getRule();
	}
	
	//GroupMember:
	//	(type?=LaunchModeType? & adopt?='adopt'?) 'member' member=[LaunchConfig|FQName] postAction?=GroupPostLaunchAction?
	//	';';
	public GroupMemberElements getGroupMemberAccess() {
		return pGroupMember;
	}
	
	public ParserRule getGroupMemberRule() {
		return getGroupMemberAccess().getRule();
	}
	
	//GroupPostLaunchAction:
	//	GroupPostLaunchDelay | GroupPostLaunchRegex | GroupPostLaunchWait;
	public GroupPostLaunchActionElements getGroupPostLaunchActionAccess() {
		return pGroupPostLaunchAction;
	}
	
	public ParserRule getGroupPostLaunchActionRule() {
		return getGroupPostLaunchActionAccess().getRule();
	}
	
	//GroupPostLaunchDelay:
	//	'delay' delay=INT;
	public GroupPostLaunchDelayElements getGroupPostLaunchDelayAccess() {
		return pGroupPostLaunchDelay;
	}
	
	public ParserRule getGroupPostLaunchDelayRule() {
		return getGroupPostLaunchDelayAccess().getRule();
	}
	
	//GroupPostLaunchRegex:
	//	'regex' regex=STRING;
	public GroupPostLaunchRegexElements getGroupPostLaunchRegexAccess() {
		return pGroupPostLaunchRegex;
	}
	
	public ParserRule getGroupPostLaunchRegexRule() {
		return getGroupPostLaunchRegexAccess().getRule();
	}
	
	//GroupPostLaunchWait:
	//	{GroupPostLaunchWait} 'wait';
	public GroupPostLaunchWaitElements getGroupPostLaunchWaitAccess() {
		return pGroupPostLaunchWait;
	}
	
	public ParserRule getGroupPostLaunchWaitRule() {
		return getGroupPostLaunchWaitAccess().getRule();
	}
	
	/// **
	// * A possibly fully qualified name (separated by '.').
	// * / FQName:
	//	ID ('.' ID)*;
	public FQNameElements getFQNameAccess() {
		return pFQName;
	}
	
	public ParserRule getFQNameRule() {
		return getFQNameAccess().getRule();
	}
	
	//enum LaunchConfigType:
	//	JAVA="java" | ECLIPSE="eclipse" | RAP="rap" | GROUP="group";
	public LaunchConfigTypeElements getLaunchConfigTypeAccess() {
		return eLaunchConfigType;
	}
	
	public EnumRule getLaunchConfigTypeRule() {
		return getLaunchConfigTypeAccess().getRule();
	}
	
	//enum LaunchModeType:
	//	RUN="run" | DEBUG="debug" | PROFILE="profile" | COVERAGE="coverage" | INHERIT="inherit";
	public LaunchModeTypeElements getLaunchModeTypeAccess() {
		return eLaunchModeType;
	}
	
	public EnumRule getLaunchModeTypeRule() {
		return getLaunchModeTypeAccess().getRule();
	}
	
	//enum MemoryUnit:
	//	MB | MB='mb' | MB='M' | MB='m' | GB | GB='gb' | GB='G' | GB='g';
	public MemoryUnitElements getMemoryUnitAccess() {
		return eMemoryUnit;
	}
	
	public EnumRule getMemoryUnitRule() {
		return getMemoryUnitAccess().getRule();
	}
	
	//enum OutputStream:
	//	STDOUT="stdout" | STDERR="stderr" | BOTH="both-out";
	public OutputStreamElements getOutputStreamAccess() {
		return eOutputStream;
	}
	
	public EnumRule getOutputStreamRule() {
		return getOutputStreamAccess().getRule();
	}
	
	//enum InputStream:
	//	STDIN="stdin";
	public InputStreamElements getInputStreamAccess() {
		return eInputStream;
	}
	
	public EnumRule getInputStreamRule() {
		return getInputStreamAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('.'? ('a'..'z' | 'A'..'Z' | '^' | '_' | '-' | '0'..'9'))*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal QUALIFIER:
	//	'a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9'*;
	public TerminalRule getQUALIFIERRule() {
		return tQUALIFIER;
	}
	
	//terminal VERSION:
	//	INT (('.' INT) (('.' INT) ('.' QUALIFIER)?)?)?;
	public TerminalRule getVERSIONRule() {
		return tVERSION;
	}
	
	//terminal EQ:
	//	'=';
	public TerminalRule getEQRule() {
		return tEQ;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
