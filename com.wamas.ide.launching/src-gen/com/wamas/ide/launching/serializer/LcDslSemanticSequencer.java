/*
 * generated by Xtext 2.10.0
 */
package com.wamas.ide.launching.serializer;

import com.google.inject.Inject;
import com.wamas.ide.launching.lcDsl.AddPlugin;
import com.wamas.ide.launching.lcDsl.AnyPath;
import com.wamas.ide.launching.lcDsl.ApplicationExtPoint;
import com.wamas.ide.launching.lcDsl.ClearOption;
import com.wamas.ide.launching.lcDsl.EnvironmentVariable;
import com.wamas.ide.launching.lcDsl.ExecutionEnvironment;
import com.wamas.ide.launching.lcDsl.ExistingPath;
import com.wamas.ide.launching.lcDsl.Favorites;
import com.wamas.ide.launching.lcDsl.GroupMember;
import com.wamas.ide.launching.lcDsl.GroupPostLaunchDelay;
import com.wamas.ide.launching.lcDsl.GroupPostLaunchRegex;
import com.wamas.ide.launching.lcDsl.GroupPostLaunchWait;
import com.wamas.ide.launching.lcDsl.IgnorePlugin;
import com.wamas.ide.launching.lcDsl.JavaType;
import com.wamas.ide.launching.lcDsl.LCModel;
import com.wamas.ide.launching.lcDsl.LaunchConfig;
import com.wamas.ide.launching.lcDsl.LcDslPackage;
import com.wamas.ide.launching.lcDsl.MemoryOption;
import com.wamas.ide.launching.lcDsl.Plugin;
import com.wamas.ide.launching.lcDsl.ProductExtPoint;
import com.wamas.ide.launching.lcDsl.ProgramArgument;
import com.wamas.ide.launching.lcDsl.Project;
import com.wamas.ide.launching.lcDsl.Redirect;
import com.wamas.ide.launching.lcDsl.VmArgument;
import com.wamas.ide.launching.services.LcDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LcDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LcDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LcDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LcDslPackage.ADD_PLUGIN:
				sequence_AddPlugin(context, (AddPlugin) semanticObject); 
				return; 
			case LcDslPackage.ANY_PATH:
				sequence_AnyPath(context, (AnyPath) semanticObject); 
				return; 
			case LcDslPackage.APPLICATION_EXT_POINT:
				sequence_ApplicationExtPoint(context, (ApplicationExtPoint) semanticObject); 
				return; 
			case LcDslPackage.CLEAR_OPTION:
				sequence_ClearOption(context, (ClearOption) semanticObject); 
				return; 
			case LcDslPackage.ENVIRONMENT_VARIABLE:
				sequence_EnvironmentVariable(context, (EnvironmentVariable) semanticObject); 
				return; 
			case LcDslPackage.EXECUTION_ENVIRONMENT:
				sequence_ExecutionEnvironment(context, (ExecutionEnvironment) semanticObject); 
				return; 
			case LcDslPackage.EXISTING_PATH:
				sequence_ExistingPath(context, (ExistingPath) semanticObject); 
				return; 
			case LcDslPackage.FAVORITES:
				sequence_Favorites(context, (Favorites) semanticObject); 
				return; 
			case LcDslPackage.GROUP_MEMBER:
				sequence_GroupMember(context, (GroupMember) semanticObject); 
				return; 
			case LcDslPackage.GROUP_POST_LAUNCH_DELAY:
				sequence_GroupPostLaunchDelay(context, (GroupPostLaunchDelay) semanticObject); 
				return; 
			case LcDslPackage.GROUP_POST_LAUNCH_REGEX:
				sequence_GroupPostLaunchRegex(context, (GroupPostLaunchRegex) semanticObject); 
				return; 
			case LcDslPackage.GROUP_POST_LAUNCH_WAIT:
				sequence_GroupPostLaunchWait(context, (GroupPostLaunchWait) semanticObject); 
				return; 
			case LcDslPackage.IGNORE_PLUGIN:
				sequence_IgnorePlugin(context, (IgnorePlugin) semanticObject); 
				return; 
			case LcDslPackage.JAVA_TYPE:
				sequence_JavaType(context, (JavaType) semanticObject); 
				return; 
			case LcDslPackage.LC_MODEL:
				sequence_LCModel(context, (LCModel) semanticObject); 
				return; 
			case LcDslPackage.LAUNCH_CONFIG:
				sequence_LaunchConfig(context, (LaunchConfig) semanticObject); 
				return; 
			case LcDslPackage.MEMORY_OPTION:
				sequence_MemoryOption(context, (MemoryOption) semanticObject); 
				return; 
			case LcDslPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case LcDslPackage.PRODUCT_EXT_POINT:
				sequence_ProductExtPoint(context, (ProductExtPoint) semanticObject); 
				return; 
			case LcDslPackage.PROGRAM_ARGUMENT:
				sequence_ProgramArgument(context, (ProgramArgument) semanticObject); 
				return; 
			case LcDslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case LcDslPackage.REDIRECT:
				sequence_Redirect(context, (Redirect) semanticObject); 
				return; 
			case LcDslPackage.VM_ARGUMENT:
				sequence_VmArgument(context, (VmArgument) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AddPlugin returns AddPlugin
	 *
	 * Constraint:
	 *     plugin=Plugin
	 */
	protected void sequence_AddPlugin(ISerializationContext context, AddPlugin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.ADD_PLUGIN__PLUGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.ADD_PLUGIN__PLUGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddPluginAccess().getPluginPluginParserRuleCall_1_0(), semanticObject.getPlugin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Path returns AnyPath
	 *     AnyPath returns AnyPath
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_AnyPath(ISerializationContext context, AnyPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.PATH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.PATH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnyPathAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ApplicationExtPoint returns ApplicationExtPoint
	 *
	 * Constraint:
	 *     name=FQName
	 */
	protected void sequence_ApplicationExtPoint(ISerializationContext context, ApplicationExtPoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.APPLICATION_EXT_POINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.APPLICATION_EXT_POINT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplicationExtPointAccess().getNameFQNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClearOption returns ClearOption
	 *
	 * Constraint:
	 *     ((workspace?='workspace' | log?='log') noAskClear?='!'? config?='config'*)*
	 */
	protected void sequence_ClearOption(ISerializationContext context, ClearOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvironmentVariable returns EnvironmentVariable
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_EnvironmentVariable(ISerializationContext context, EnvironmentVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.ENVIRONMENT_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.ENVIRONMENT_VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.ENVIRONMENT_VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.ENVIRONMENT_VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentVariableAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEnvironmentVariableAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExecutionEnvironment returns ExecutionEnvironment
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExecutionEnvironment(ISerializationContext context, ExecutionEnvironment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.EXECUTION_ENVIRONMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.EXECUTION_ENVIRONMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecutionEnvironmentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Path returns ExistingPath
	 *     ExistingPath returns ExistingPath
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ExistingPath(ISerializationContext context, ExistingPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.PATH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.PATH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistingPathAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Favorites returns Favorites
	 *
	 * Constraint:
	 *     (run?='run' | debug?='debug')*
	 */
	protected void sequence_Favorites(ISerializationContext context, Favorites semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GroupMember returns GroupMember
	 *
	 * Constraint:
	 *     ((type?=LaunchModeType | adopt?='adopt')* member=[LaunchConfig|FQName] postAction?=GroupPostLaunchAction?)
	 */
	protected void sequence_GroupMember(ISerializationContext context, GroupMember semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GroupPostLaunchAction returns GroupPostLaunchDelay
	 *     GroupPostLaunchDelay returns GroupPostLaunchDelay
	 *
	 * Constraint:
	 *     delay=INT
	 */
	protected void sequence_GroupPostLaunchDelay(ISerializationContext context, GroupPostLaunchDelay semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.GROUP_POST_LAUNCH_DELAY__DELAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.GROUP_POST_LAUNCH_DELAY__DELAY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGroupPostLaunchDelayAccess().getDelayINTTerminalRuleCall_1_0(), semanticObject.getDelay());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GroupPostLaunchAction returns GroupPostLaunchRegex
	 *     GroupPostLaunchRegex returns GroupPostLaunchRegex
	 *
	 * Constraint:
	 *     regex=STRING
	 */
	protected void sequence_GroupPostLaunchRegex(ISerializationContext context, GroupPostLaunchRegex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.GROUP_POST_LAUNCH_REGEX__REGEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.GROUP_POST_LAUNCH_REGEX__REGEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGroupPostLaunchRegexAccess().getRegexSTRINGTerminalRuleCall_1_0(), semanticObject.getRegex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GroupPostLaunchAction returns GroupPostLaunchWait
	 *     GroupPostLaunchWait returns GroupPostLaunchWait
	 *
	 * Constraint:
	 *     {GroupPostLaunchWait}
	 */
	protected void sequence_GroupPostLaunchWait(ISerializationContext context, GroupPostLaunchWait semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IgnorePlugin returns IgnorePlugin
	 *
	 * Constraint:
	 *     plugin=Plugin
	 */
	protected void sequence_IgnorePlugin(ISerializationContext context, IgnorePlugin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.IGNORE_PLUGIN__PLUGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.IGNORE_PLUGIN__PLUGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIgnorePluginAccess().getPluginPluginParserRuleCall_1_0(), semanticObject.getPlugin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JavaType returns JavaType
	 *
	 * Constraint:
	 *     name=FQName
	 */
	protected void sequence_JavaType(ISerializationContext context, JavaType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.JAVA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.JAVA_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJavaTypeAccess().getNameFQNameParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LCModel returns LCModel
	 *
	 * Constraint:
	 *     configurations+=LaunchConfig+
	 */
	protected void sequence_LCModel(ISerializationContext context, LCModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LaunchConfig returns LaunchConfig
	 *
	 * Constraint:
	 *     (
	 *         (explicit?='explicit' | manual?='manual' | foreground?='foreground' | noConsole?='no-console')* 
	 *         type=LaunchConfigType 
	 *         name=FQName 
	 *         superConfig=[LaunchConfig|FQName]? 
	 *         (
	 *             clears=ClearOption | 
	 *             workspace=AnyPath | 
	 *             workingDir=ExistingPath | 
	 *             memory=MemoryOption | 
	 *             project=Project | 
	 *             mainClass=JavaType | 
	 *             application=ApplicationExtPoint | 
	 *             product=ProductExtPoint | 
	 *             favorites=Favorites | 
	 *             redirect=Redirect | 
	 *             execEnv=ExecutionEnvironment
	 *         )* 
	 *         plugins+=AddPlugin? 
	 *         (
	 *             (ignore+=IgnorePlugin | groupMembers+=GroupMember | vmArgs+=VmArgument | progArgs+=ProgramArgument | envVars+=EnvironmentVariable)? 
	 *             plugins+=AddPlugin?
	 *         )*
	 *     )
	 */
	protected void sequence_LaunchConfig(ISerializationContext context, LaunchConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemoryOption returns MemoryOption
	 *
	 * Constraint:
	 *     ((min=INT minUnit=MemoryUnit) | (max=INT maxUnit=MemoryUnit) | (perm=INT permUnit=MemoryUnit))*
	 */
	protected void sequence_MemoryOption(ISerializationContext context, MemoryOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plugin returns Plugin
	 *
	 * Constraint:
	 *     (name=FQName version=VERSION?)
	 */
	protected void sequence_Plugin(ISerializationContext context, Plugin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductExtPoint returns ProductExtPoint
	 *
	 * Constraint:
	 *     name=FQName
	 */
	protected void sequence_ProductExtPoint(ISerializationContext context, ProductExtPoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.PRODUCT_EXT_POINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.PRODUCT_EXT_POINT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductExtPointAccess().getNameFQNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProgramArgument returns ProgramArgument
	 *
	 * Constraint:
	 *     arguments+=STRING*
	 */
	protected void sequence_ProgramArgument(ISerializationContext context, ProgramArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     name=FQName
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LcDslPackage.Literals.PROJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LcDslPackage.Literals.PROJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjectAccess().getNameFQNameParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Redirect returns Redirect
	 *
	 * Constraint:
	 *     ((outWhich=OutputStream outFile=AnyPath) | (inWhich=InputStream inFile=ExistingPath))*
	 */
	protected void sequence_Redirect(ISerializationContext context, Redirect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VmArgument returns VmArgument
	 *
	 * Constraint:
	 *     arguments+=STRING*
	 */
	protected void sequence_VmArgument(ISerializationContext context, VmArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
